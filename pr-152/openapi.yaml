openapi: 3.0.2
info:
  version: 0.3.0
  title: Registry of Open Community Challenge API
  contact:
    name: The ROCC Team
    email: thomas.schaffter@sagebionetworks.org
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas'
  license:
    name: Apache 2.0
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas'
  x-logo:
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas/logo.png'
  description: |
    The OpenAPI specification implemented by the Challenge Registries.
    # Introduction
    TBA
tags:
  - name: Challenge
    description: Operations about challenges
  - name: ChallengePlatform
    description: Operations about challenge platforms
  - name: Grant
    description: Operations about grants
  - name: Organization
    description: Operations about organizations
  - name: Person
    description: Operations about persons
  - name: Tag
    description: Operations about tags
  - name: User
    description: Operations about users
  - name: HealthCheck
    description: Operations about health checks
servers:
  - url: '{protocol}://rocc.org/api/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
paths:
  /challenges:
    post:
      tags:
        - Challenge
      summary: Add a challenge
      description: Adds a challenge
      operationId: createChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeCreateResponse'
          description: Success
          links:
            GetChallengeById:
              $ref: '#/components/links/GetChallengeById'
            DeleteChallengeById:
              $ref: '#/components/links/DeleteChallengeById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Challenge
      summary: List all the challenges
      description: Returns all the challenges
      operationId: listChallenges
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/searchTerms'
        - $ref: '#/components/parameters/tagIds'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/platformIds'
        - $ref: '#/components/parameters/startDateRange'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfChallenges'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Challenge
      summary: Delete all challenges
      description: Delete all challenges
      operationId: deleteAllChallenges
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/challenges/{challengeId}':
    parameters:
      - in: path
        name: challengeId
        description: The ID of the challenge
        required: true
        schema:
          $ref: '#/components/schemas/ChallengeId'
    get:
      tags:
        - Challenge
      summary: Get a challenge
      description: Returns the challenge specified
      operationId: getChallenge
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Challenge
      summary: Delete a challenge
      description: Deletes the challenge specified
      operationId: deleteChallenge
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challengePlatforms:
    post:
      tags:
        - ChallengePlatform
      summary: Create a challenge platform
      description: Create a challenge platform with the specified ID
      operationId: createChallengePlatform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengePlatformCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatformCreateResponse'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - ChallengePlatform
      summary: Get all challenge platforms
      description: Returns the challenge platforms
      operationId: listChallengePlatforms
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfChallengePlatforms'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - ChallengePlatform
      summary: Delete all challenge platforms
      description: Delete all challenge platforms
      operationId: deleteAllChallengePlatforms
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/challengePlatforms/{challengePlatformId}':
    parameters:
      - in: path
        name: challengePlatformId
        description: The unique identifier of the challenge platform
        required: true
        schema:
          $ref: '#/components/schemas/ChallengePlatformId'
    get:
      tags:
        - ChallengePlatform
      summary: Get a challenge platform
      description: Returns the challenge platform specified
      operationId: getChallengePlatform
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - ChallengePlatform
      summary: Delete a challenge platform
      description: Deletes the challenge platform specified
      operationId: deleteChallengePlatform
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /grants:
    post:
      tags:
        - Grant
      summary: Create a grant
      description: Create a grant with the specified name
      operationId: createGrant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantCreateResponse'
          description: Success
          links:
            GetGrantById:
              $ref: '#/components/links/GetGrantById'
            DeleteGrantById:
              $ref: '#/components/links/DeleteGrantById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Grant
      summary: Get all grants
      description: Returns the grants
      operationId: listGrants
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfGrants'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Grant
      summary: Delete all grants
      description: Delete all grants
      operationId: deleteAllGrants
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/grants/{grantId}':
    parameters:
      - in: path
        name: grantId
        description: The ID of the grant that is being created
        required: true
        schema:
          $ref: '#/components/schemas/GrantId'
    get:
      tags:
        - Grant
      summary: Get a grant
      description: Returns the grant specified
      operationId: getGrant
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grant'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Grant
      summary: Delete a grant
      description: Deletes the grant specified
      operationId: deleteGrant
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations:
    post:
      tags:
        - Organization
      summary: Create an organization
      description: Create an organization with the specified account name
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreateResponse'
          description: Success
          links:
            GetOrganizationById:
              $ref: '#/components/links/GetOrganizationById'
            DeleteOrganizationById:
              $ref: '#/components/links/DeleteOrganizationById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Organization
      summary: Get all organizations
      description: Returns the organizations
      operationId: listOrganizations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfOrganizations'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Organization
      summary: Delete all organizations
      description: Delete all organizations
      operationId: deleteAllOrganizations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/organizations/{organizationId}':
    parameters:
      - in: path
        name: organizationId
        description: >-
          The unique identifier of the organization, either the user ID or
          account name
        required: true
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Organization
      summary: Get an organization
      description: Returns the organization specified
      operationId: getOrganization
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Organization
      summary: Delete an organization
      description: Deletes the organization specified
      operationId: deleteOrganization
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /persons:
    post:
      tags:
        - Person
      summary: Create a person
      description: Create a person with the specified name
      operationId: createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCreateResponse'
          description: Success
          links:
            GetPersonById:
              $ref: '#/components/links/GetPersonById'
            DeletePersonById:
              $ref: '#/components/links/DeletePersonById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Person
      summary: Get all persons
      description: Returns the persons
      operationId: listPersons
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPersons'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Person
      summary: Delete all persons
      description: Delete all persons
      operationId: deleteAllPersons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/persons/{personId}':
    parameters:
      - in: path
        name: personId
        description: The unique identifier of the person
        required: true
        schema:
          $ref: '#/components/schemas/PersonId'
    get:
      tags:
        - Person
      summary: Get a person
      description: Returns the person specified
      operationId: getPerson
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Person
      summary: Delete a person
      description: Deletes the person specified
      operationId: deletePerson
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tags:
    post:
      tags:
        - Tag
      summary: Create a tag
      description: Create a tag with the specified name
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCreateResponse'
          description: Success
          links:
            GetTagById:
              $ref: '#/components/links/GetTagById'
            DeleteTagById:
              $ref: '#/components/links/DeleteTagById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Tag
      summary: Get all tags
      description: Returns the tags
      operationId: listTags
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfTags'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tag
      summary: Delete all tags
      description: Delete all tags
      operationId: deleteAllTags
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/tags/{tagId}':
    parameters:
      - in: path
        name: tagId
        description: The unique identifier of the tag
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
    get:
      tags:
        - Tag
      summary: Get a tag
      description: Returns the tag specified
      operationId: getTag
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tag
      summary: Delete a tag
      description: Deletes the tag specified
      operationId: deleteTag
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - User
      summary: Create a user
      description: Create a user with the specified account name
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
          description: Success
          links:
            GetUserById:
              $ref: '#/components/links/GetUserById'
            DeleteUserById:
              $ref: '#/components/links/DeleteUserById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - User
      summary: Get all users
      description: Returns the users
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfUsers'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - User
      summary: Delete all users
      description: Delete all users
      operationId: deleteAllUsers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/users/{userId}':
    parameters:
      - in: path
        name: userId
        description: 'The unique identifier of the user, either the user account ID or login'
        required: true
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - User
      summary: Get a user
      description: Returns the user specified
      operationId: getUser
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - User
      summary: Delete a user
      description: Deletes the user specified
      operationId: deleteUser
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
        '400':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /healthcheck:
    get:
      tags:
        - HealthCheck
      summary: Get health check information
      description: Get information about the health of the service
      operationId: getHealthCheck
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    limit:
      name: limit
      description: Maximum number of results returned
      in: query
      required: false
      schema:
        type: integer
        default: 10
        minimum: 10
        maximum: 100
    offset:
      name: offset
      description: Index of the first result that must be returned
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    sort:
      name: sort
      description: Property used to sort the results that must be returned
      in: query
      required: false
      schema:
        type: string
        enum:
          - createdAt
          - updatedAt
    direction:
      name: direction
      description: Can be either `asc` or `desc`. Ignored without `sort` parameter.
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
    searchTerms:
      name: searchTerms
      description: A string of search terms used to filter the results
      in: query
      required: false
      schema:
        type: string
    tagIds:
      name: tagIds
      description: Array of tag ids used to filter the results
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TagId'
    status:
      name: status
      description: Array of challenge status used to filter the results
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ChallengeStatus'
    platformIds:
      name: platformIds
      description: Array of challenge platform ids used to filter the results
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ChallengePlatformId'
    startDateRange:
      name: startDateRange
      description: Return challenges that start during the date range specified
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/DateRange'
  schemas:
    TagId:
      description: The unique identifier of a tag
      type: string
      example: 507f1f77bcf86cd799439011
    ChallengeStatus:
      description: The status of the challenge
      type: string
      enum:
        - upcoming
        - active
        - completed
      example: active
    ChallengePlatformId:
      description: The unique identifier of a challenge platform
      type: string
      example: 507f1f77bcf86cd799439011
    DateRange:
      type: object
      description: A date range
      properties:
        start:
          description: Start date of the date range
          type: string
          format: date
        end:
          description: End date of the date range
          type: string
          format: date
      example:
        start: '2021-07-17'
        end: '2021-07-17'
    ResponsePageMetadata:
      type: object
      description: A page of results
      properties:
        offset:
          description: Index of the first result that must be returned
          type: integer
        limit:
          description: Maximum number of results returned
          type: integer
        paging:
          description: Links to navigate to different pages of results
          type: object
          properties:
            next:
              description: Link to the next page of results
              type: string
              format: uri
        totalResults:
          description: Total number of results in the result set
          type: integer
      required:
        - offset
        - limit
        - paging
    ChallengeId:
      description: The unique identifier of the challenge
      type: string
      example: 507f1f77bcf86cd799439011
    ChallengeCreateResponse:
      type: object
      description: The unique identifier of the challenge created
      properties:
        id:
          $ref: '#/components/schemas/ChallengeId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    ChallengeCreateRequest:
      type: object
      description: The information used to create a challenge
      properties:
        name:
          description: The name of the challenge
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          minLength: 3
          maxLength: 60
        displayName:
          type: string
          minLength: 3
          maxLength: 60
        description:
          description: A short description of the challenge
          type: string
          nullable: true
          maxLength: 280
        websiteUrl:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        startDate:
          type: string
          format: date
          nullable: true
        endDate:
          type: string
          format: date
          nullable: true
        platformId:
          $ref: '#/components/schemas/ChallengePlatformId'
          nullable: true
      required:
        - name
        - displayName
        - description
        - websiteUrl
        - status
      example:
        name: awesome-challenge
        displayName: Awesome Challenge
        description: This challenge is awesome.
        websiteUrl: 'https://synapse.org/awesome-challenge'
        status: active
        startDate: '2020-11-10'
        endDate: '2020-12-31'
        platformId: 507f1f77bcf86cd799439011
    AccountId:
      description: The unique identifier of an account
      type: string
      example: 507f1f77bcf86cd799439011
    Challenge:
      type: object
      description: A challenge
      allOf:
        - $ref: '#/components/schemas/ChallengeCreateResponse'
        - $ref: '#/components/schemas/ChallengeCreateRequest'
        - type: object
          properties:
            fullName:
              type: string
            ownerId:
              $ref: '#/components/schemas/AccountId'
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
          required:
            - fullName
            - ownerId
            - createdAt
            - updatedAt
          example:
            fullName: dream/awesome-challenge
            ownerId: 507f1f77bcf86cd799439011
            createdAt: '2017-07-08T16:18:44-04:00'
            updatedAt: '2017-07-08T16:18:44-04:00'
    PageOfChallenges:
      type: object
      description: A page of Challenges
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            challenges:
              description: An array of Challenges
              type: array
              items:
                $ref: '#/components/schemas/Challenge'
          required:
            - challenges
    Error:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    EmptyObject:
      type: object
      description: Empty JSON object
    ChallengePlatformCreateResponse:
      type: object
      description: The unique identifier of the challenge platform created
      properties:
        id:
          $ref: '#/components/schemas/ChallengePlatformId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    ChallengePlatformName:
      description: The name of the challenge platform
      type: string
      minLength: 3
      maxLength: 30
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      example: awesome-challenge-platform
    ChallengePlatformCreateRequest:
      type: object
      description: The information used to create a challenge platform
      properties:
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
        displayName:
          type: string
        websiteUrl:
          type: string
          format: uri
        avatarUrl:
          type: string
          format: uri
      required:
        - name
        - displayName
        - websiteUrl
        - avatarUrl
      example:
        name: awesome-challenge-platform
        displayName: Awesome Challenge Platform
        websiteUrl: 'https://awesome-challenge-platform.io'
        avatarUrl: 'https://awesome-challenge-platform.io/logo.png'
    ChallengePlatform:
      type: object
      description: A challenge platform
      allOf:
        - $ref: '#/components/schemas/ChallengePlatformCreateResponse'
        - $ref: '#/components/schemas/ChallengePlatformCreateRequest'
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
          required:
            - createdAt
            - updatedAt
          example:
            createdAt: '2017-07-08T16:18:44-04:00'
            updatedAt: '2017-07-08T16:18:44-04:00'
    PageOfChallengePlatforms:
      type: object
      description: A page of ChallengePlatforms
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            challengePlatforms:
              description: An array of ChallengePlatforms
              type: array
              items:
                $ref: '#/components/schemas/ChallengePlatform'
          required:
            - challengePlatforms
    GrantId:
      description: The unique identifier of a grant
      type: string
      example: 507f1f77bcf86cd799439011
    GrantCreateResponse:
      type: object
      description: The unique identifier of the grant created
      properties:
        id:
          $ref: '#/components/schemas/GrantId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    GrantCreateRequest:
      type: object
      description: The information required to create a grant
      properties:
        name:
          description: The name of the grant
          type: string
      required:
        - name
      example:
        name: Awesome Grant
    Grant:
      type: object
      description: Information about monetary resources for challenge
      allOf:
        - $ref: '#/components/schemas/GrantCreateResponse'
        - $ref: '#/components/schemas/GrantCreateRequest'
    PageOfGrants:
      type: object
      description: A page of Grants
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            grants:
              description: An array of Grants
              type: array
              items:
                $ref: '#/components/schemas/Grant'
          required:
            - grants
    OrganizationCreateResponse:
      type: object
      description: The unique identifier of the org created
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    Email:
      description: An email address
      type: string
      format: email
      example: john.smith@example.com
    OrganizationCreateRequest:
      type: object
      description: The information required to create an org account
      properties:
        login:
          type: string
        email:
          $ref: '#/components/schemas/Email'
      required:
        - login
        - email
      example:
        login: awesome-org
        email: contact@example.org
    Organization:
      type: object
      description: An organization
      allOf:
        - $ref: '#/components/schemas/OrganizationCreateResponse'
        - $ref: '#/components/schemas/OrganizationCreateRequest'
        - type: object
          properties:
            name:
              type: string
              nullable: true
            avatarUrl:
              type: string
              format: uri
              example: 'https://example.com/awesome-avatar.png'
              nullable: true
            description:
              type: string
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            type:
              type: string
              example: Organization
          required:
            - createdAt
            - updatedAt
            - type
          example:
            name: Awesome Org
            avatarUrl: 'https://example.com/awesome-avatar.png'
            description: A great organization
            createdAt: '2017-07-08T16:18:44-04:00'
            updatedAt: '2017-07-08T16:18:44-04:00'
            type: Organization
    PageOfOrganizations:
      type: object
      description: A page of Organizations
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            organizations:
              description: An array of Organizations
              type: array
              items:
                $ref: '#/components/schemas/Organization'
          required:
            - organizations
    PersonId:
      description: The unique identifier of a person
      type: string
      example: 507f1f77bcf86cd799439011
    PersonCreateResponse:
      type: object
      description: The unique identifier of the person created
      properties:
        id:
          $ref: '#/components/schemas/PersonId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    PersonCreateRequest:
      type: object
      description: The information used to create a person
      properties:
        name:
          type: string
        email:
          $ref: '#/components/schemas/Email'
          nullable: true
        organizationIds:
          type: array
          items:
            $ref: '#/components/schemas/AccountId'
      required:
        - name
        - organizationIds
      example:
        name: John Smith
        email: john.smith@example.com
        organizationIds:
          - 507f1f77bcf86cd799439011
          - 507f1f77bcf86cd799439012
    Person:
      type: object
      description: A person
      allOf:
        - $ref: '#/components/schemas/PersonCreateResponse'
        - $ref: '#/components/schemas/PersonCreateRequest'
    PageOfPersons:
      type: object
      description: A page of Persons
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            persons:
              description: An array of Persons
              type: array
              items:
                $ref: '#/components/schemas/Person'
          required:
            - persons
    TagCreateResponse:
      type: object
      description: The unique identifier of the tag created
      properties:
        id:
          $ref: '#/components/schemas/TagId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    TagName:
      description: The name of a tag
      type: string
      minLength: 3
      maxLength: 30
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      example: awesome-tag
    TagCreateRequest:
      type: object
      description: The information required to create a tag
      properties:
        name:
          $ref: '#/components/schemas/TagName'
      required:
        - name
      example:
        name: awesome-tag
    Tag:
      type: object
      description: A tag that can be assigned to a resource
      allOf:
        - $ref: '#/components/schemas/TagCreateResponse'
        - $ref: '#/components/schemas/TagCreateRequest'
    PageOfTags:
      type: object
      description: A page of Tags
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            tags:
              description: An array of Tags
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          required:
            - tags
    UserCreateResponse:
      type: object
      description: The unique identifier of the user created
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
      required:
        - id
      example:
        id: 507f1f77bcf86cd799439011
    UserCreateRequest:
      type: object
      description: The information required to create a user account
      properties:
        login:
          type: string
        email:
          $ref: '#/components/schemas/Email'
      required:
        - login
        - email
      example:
        login: awesome-user
        email: awesome-user@example.org
    User:
      type: object
      description: A simple user
      allOf:
        - $ref: '#/components/schemas/UserCreateResponse'
        - $ref: '#/components/schemas/UserCreateRequest'
        - type: object
          properties:
            name:
              type: string
              nullable: true
            avatarUrl:
              type: string
              format: uri
              example: 'https://example.com/awesome-avatar.png'
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            type:
              type: string
              example: User
          required:
            - createdAt
            - updatedAt
            - type
          example:
            name: Awesome User
            avatarUrl: 'https://example.com/awesome-avatar.png'
            createdAt: '2017-07-08T16:18:44-04:00'
            updatedAt: '2017-07-08T16:18:44-04:00'
            type: User
    PageOfUsers:
      type: object
      description: A page of Users
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            users:
              description: An array of Users
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - users
    HealthCheck:
      type: object
      description: Represents the health of a service
      properties:
        status:
          description: Indicates whether the service status is acceptable or not
          type: string
          enum:
            - pass
            - fail
            - warn
      required:
        - status
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request conflicts with current state of the target resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  links:
    GetChallengeById:
      operationId: getChallenge
      description: >
        The `id` value returned in the response can be used as the `challengeId`
        parameter in `GET /challenges/{challengeId}`
      parameters:
        challengeId: $response.body#/challengeId
    DeleteChallengeById:
      operationId: deleteChallenge
      description: >
        The `id` value returned in the response can be used as the `challengeId`
        parameter in `DELETE /challenges/{challengeId}`
      parameters:
        challengeId: $response.body#/challengeId
    GetGrantById:
      operationId: getGrant
      description: >
        The `id` value returned in the response can be used as the `grantId`
        parameter in `GET /grants/{grantId}`
      parameters:
        grantId: $response.body#/grantId
    DeleteGrantById:
      operationId: deleteGrant
      description: >
        The `id` value returned in the response can be used as the `grantId`
        parameter in `DELETE /grants/{grantId}`
      parameters:
        grantId: $response.body#/grantId
    GetOrganizationById:
      operationId: getOrganization
      description: >
        The `id` value returned in the response can be used as the
        `organizationId` parameter in `GET /organizations/{organizationId}`
      parameters:
        organizationId: $response.body#/organizationId
    DeleteOrganizationById:
      operationId: deleteOrganization
      description: >
        The `id` value returned in the response can be used as the
        `organizationId` parameter in `DELETE /organizations/{organizationId}`
      parameters:
        organizationId: $response.body#/organizationId
    GetPersonById:
      operationId: getPerson
      description: >
        The `id` value returned in the response can be used as the `personId`
        parameter in `GET /persons/{personId}`
      parameters:
        personId: $response.body#/personId
    DeletePersonById:
      operationId: deletePerson
      description: >
        The `id` value returned in the response can be used as the `personId`
        parameter in `DELETE /persons/{personId}`
      parameters:
        personId: $response.body#/personId
    GetTagById:
      operationId: getTag
      description: >
        The `id` value returned in the response can be used as the `tagId`
        parameter in `GET /tags/{tagId}`
      parameters:
        tagId: $response.body#/tagId
    DeleteTagById:
      operationId: deleteTag
      description: >
        The `id` value returned in the response can be used as the `tagId`
        parameter in `DELETE /tags/{tagId}`
      parameters:
        tagId: $response.body#/tagId
    GetUserById:
      operationId: getUser
      description: >
        The `userName` value returned in the response can be used as the
        `userName` parameter in `GET /users/{userName}`
      parameters:
        userName: $response.body#/userName
    DeleteUserById:
      operationId: deleteUser
      description: >
        The `userName` value returned in the response can be used as the
        `userName` parameter in `DELETE /users/{userName}`
      parameters:
        userName: $response.body#/userName
